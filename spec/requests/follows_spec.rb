require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/follows", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Follow. As you add validations to Follow, be sure to
  # adjust the attributes here as well.
  let(:follow_attributes) {
    {
      "username" => "tes-123"
    }
  }

  describe "POST /follow" do
    context "follow other user" do
      it "return current user following count" do
        user1=create(:user)
        user2=create(:user,email:"a"+user1.email,username:"tes-123")
        headers = {
          "Authorization": "Bearer #{ENV['TEST_TOKEN']}", 
        }
        expect{
          post follow_url, params: { follow: follow_attributes }, :headers => headers
        }.to change(Follow, :count).by(1)
        expect(response).to have_http_status(:ok)
      end
    end


    context "follow followed user" do
      it "return error message and its status code" do
        user1=create(:user)
        user2=create(:user,email:"a"+user1.email,username:"tes-123")
        create(:follow,user:user1,followed:user2)
        headers = {
          "Authorization": "Bearer #{ENV['TEST_TOKEN']}", 
        }
        post follow_url, params: { follow: follow_attributes }, :headers => headers
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

    context "follow unregistered user" do
      it "return error message and its status code" do
        user1=create(:user)
        headers = {
          "Authorization": "Bearer #{ENV['TEST_TOKEN']}", 
        }
        post follow_url, params: { follow: follow_attributes }, :headers => headers
        expect(response).to have_http_status(:not_found)
      end
    end

    context "follow user it self" do
      it "return error message and its status code" do
        user=create(:user)
        headers = {
          "Authorization": "Bearer #{ENV['TEST_TOKEN']}", 
        }
        post follow_url, params: { follow: {"username"=>user.username} }, :headers => headers
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

  end

  describe "DELETE /unfollow" do
    context "unfollow followed user" do
      it "return current user following count" do
        user1=create(:user)
        user2=create(:user,email:"a"+user1.email,username:"tes-123")
        headers = {
          "Authorization": "Bearer #{ENV['TEST_TOKEN']}", 
        }
        
        expect{
          post follow_url, params: { follow: follow_attributes }, :headers => headers
        }.to change(Follow, :count).by(1)
        expect{
          delete unfollow_url, params: { follow: follow_attributes }, :headers => headers
        }.to change(Follow, :count).by(-1)
      end
    end


    context "unfollow not followed user" do
      it "return error message and its status code" do
        user1=create(:user)
        user2=create(:user,email:"a"+user1.email,username:"tes-123")
        headers = {
          "Authorization": "Bearer #{ENV['TEST_TOKEN']}", 
        }
        expect{
          delete unfollow_url, params: { follow: follow_attributes }, :headers => headers
        }.to change(Follow, :count).by(0)
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

    context "unfollow unregistered user" do
      it "return error message and its status code" do
        user1=create(:user)
        headers = {
          "Authorization": "Bearer #{ENV['TEST_TOKEN']}", 
        }
        delete unfollow_url, params: { follow: follow_attributes }, :headers => headers
        expect(response).to have_http_status(:not_found)
      end
    end

  end
end
